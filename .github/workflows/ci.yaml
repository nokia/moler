name: Python CI

on: [push]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.6]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.os }} ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get -y install sshpass
          python -m pip install --upgrade pip setuptools wheel
          pip install -U pycodestyle coveralls pytest pytest-mccabe pytest-random mock pytest-asyncio
          pip install -Ur requirements.txt
      - name:  Create local users required by integration tests
        run: |
          cat /etc/passwd | grep home
          sudo useradd molerssh -c MolerSshTest -s /bin/bash -l -m -p `python3 -c 'import crypt; print(crypt.crypt("moler_password", "mr"))'`
          sudo useradd sshproxy -c Proxy4SshTest -s /bin/bash -l -m -p `python3 -c 'import crypt; print(crypt.crypt("proxy_password", "mr"))'`
          sudo useradd adbshell -c AdbShell4SshTest -s /bin/bash -l -m -p `python3 -c 'import crypt; print(crypt.crypt("adb_password", "mr"))'`
          cat /etc/passwd | grep home
          echo ---- try logging as integration tests users via ssh
          sshpass -p moler_password ssh -oStrictHostKeyChecking=no molerssh@localhost pwd
          sshpass -p proxy_password ssh -oStrictHostKeyChecking=no sshproxy@localhost pwd
          sshpass -p adb_password ssh -oStrictHostKeyChecking=no adbshell@localhost pwd
      - name:  show /usr/bin
        run: |
          ls -ld /usr/bin
          ls -la /usr/bin
      - name:  Upload adb simulator
        run: |
          sudo cp adb_simulation.sh /usr/bin/adb
          sudo chmod +x /usr/bin/adb
          sudo ls -l /usr/bin/adb
          which adb
      - name:  extend path with /home/molerssh
        run: |
          echo "/home/molerssh" >> $GITHUB_PATH
      - name:  show env
        run: |
          env
      - name:  Script before test
        run: |
          python -V
          echo $PATH
          echo "${{ env.PATH }}"
          which scp
          sshpass -p moler_password scp adb_simulation.sh molerssh@localhost:/home/molerssh/adb_simulation.sh
          sshpass -p moler_password ssh molerssh@localhost 'chmod +x ~/adb_simulation.sh'
          sshpass -p moler_password ssh molerssh@localhost 'echo "echo ---------InProfile----------" >> ~/.profile'
          sshpass -p moler_password ssh molerssh@localhost 'echo "alias adb=~/adb_simulation.sh" >> ~/.profile'
          sshpass -p moler_password ssh molerssh@localhost 'echo "echo ---------InBashProfile----------" >> ~/.bash_profile'
          sshpass -p moler_password ssh molerssh@localhost 'echo "alias adb=~/adb_simulation.sh" >> ~/.bash_profile'
          sshpass -p moler_password ssh molerssh@localhost 'echo "echo ---------InBashRc----------" >> ~/.bashrc'
          sshpass -p moler_password ssh molerssh@localhost 'pwd'
          sshpass -p moler_password ssh molerssh@localhost 'ls -la'
          sshpass -p moler_password ssh molerssh@localhost 'echo ------------- show .profile'
          sshpass -p moler_password ssh molerssh@localhost 'cat ~/.profile'
          sshpass -p moler_password ssh molerssh@localhost 'echo ------------- show .bash_profile'
          sshpass -p moler_password ssh molerssh@localhost 'cat ~/.bash_profile'
          sshpass -p moler_password ssh molerssh@localhost 'echo ------------- show PATH'
          sshpass -p moler_password ssh molerssh@localhost 'echo $PATH'
          sshpass -p moler_password ssh molerssh@localhost 'echo ------------- show env'
          sshpass -p moler_password ssh molerssh@localhost 'env'
          sshpass -p moler_password ssh molerssh@localhost 'echo ------------- check if adb works'
          sshpass -p moler_password ssh molerssh@localhost 'adb devices'
      - name: Test with pytest
        run: |
          python -m pytest -vvvsss --random --mccabe
      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: pytest-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            moler.log
          retention-days: 5
  coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.os }} ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
            sudo apt-get -y install sshpass
            python -m pip install --upgrade pip setuptools wheel
            pip install -U pycodestyle coveralls pytest pytest-mccabe pytest-random mock pytest-asyncio
            pip install -Ur requirements.txt
      - name:  Script before test
        run: |
            python -V
            cat /etc/passwd | grep home
            sudo useradd molerssh -c MolerSshTest -s /bin/bash -l -m -p `python3 -c 'import crypt; print(crypt.crypt("moler_password", "mr"))'`
            sudo useradd sshproxy -c Proxy4SshTest -s /bin/bash -l -m -p `python3 -c 'import crypt; print(crypt.crypt("proxy_password", "mr"))'`
            sudo useradd adbshell -c AdbShell4SshTest -s /bin/bash -l -m -p `python3 -c 'import crypt; print(crypt.crypt("adb_password", "mr"))'`
            cat /etc/passwd | grep home
            which scp
            sshpass -p moler_password ssh -oStrictHostKeyChecking=no molerssh@localhost pwd
            sshpass -p proxy_password ssh -oStrictHostKeyChecking=no sshproxy@localhost pwd
            sshpass -p adb_password ssh -oStrictHostKeyChecking=no adbshell@localhost pwd
            sshpass -p moler_password scp adb_simulation.sh molerssh@localhost:/home/molerssh/adb_simulation.sh
            sshpass -p moler_password ssh molerssh@localhost 'chmod +x ~/adb_simulation.sh'
            sshpass -p moler_password ssh molerssh@localhost 'echo "alias adb=~/adb_simulation.sh" >> ~/.profile'
      - name: Coverage
        run: |
          python -m pytest -v --random --cov=moler --cov-report=xml --cov-report=html --cov-report=term --mccabe
      - name: Upload pytest test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: pytest-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/*
            mypyhtml/*
            coverage.xml
            moler.log
          retention-days: 4
  style:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.os }} ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install flake8 pycodestyle pydocstyle pylint
          pip install -Ur requirements.txt
      - name: Check PyCodeStyle
        run: |
          pycodestyle --statistics --count moler
#      - name: Check PyDocStyle
#        run: |
#          pydocstyle --count moler
      - name: Check PyLint
        run: |
          pylint moler || echo $(($? % 4))
#      - name: Check flake8
#        run: |
#          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=160 --statistics
